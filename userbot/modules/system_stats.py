# Copyright (C) 2019 The Raphielscape Company LLC.
#
# Licensed under the Raphielscape Public License, Version 1.c (the "License");
# you may not use this file except in compliance with the License.
#
""" Userbot module for getting information about the server. """

from asyncio import create_subprocess_exec as asyncrunapp
from asyncio.subprocess import PIPE as asyncPIPE
from os import remove
from platform import python_version, uname
from shutil import which

from telethon import version

from userbot import ALIVE_NAME, CMD_HELP, KENSURBOT_VERSION
from userbot.events import register

# ================= CONSTANT =================
DEFAULTUSER = ALIVE_NAME or "Set `ALIVE_NAME` ConfigVar!"
# ============================================


@register(outgoing=True, pattern=r"^\.sysd$")
async def sysdetails(sysd):
    """For .sysd command, get system info using neofetch."""
    if not sysd.text[0].isalpha() and sysd.text[0] not in ("/", "#", "@", "!"):
        try:
            fetch = await asyncrunapp(
                "neofetch",
                "--stdout",
                stdout=asyncPIPE,
                stderr=asyncPIPE,
            )

            stdout, stderr = await fetch.communicate()
            result = str(stdout.decode().strip()) + str(stderr.decode().strip())

            await sysd.edit("`" + result + "`")
        except FileNotFoundError:
            await sysd.edit("**–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ—Ñ–µ—Ç—á —Å–Ω–∞—á–∞–ª–∞!**")


@register(outgoing=True, pattern=r"^\.botver$")
async def bot_ver(event):
    """For .botver command, get the bot version."""
    if event.text[0].isalpha() or event.text[0] in ("/", "#", "@", "!"):
        return
    if which("git") is not None:
        ver = await asyncrunapp(
            "git",
            "describe",
            "--all",
            "--long",
            stdout=asyncPIPE,
            stderr=asyncPIPE,
        )
        stdout, stderr = await ver.communicate()
        verout = str(stdout.decode().strip()) + str(stderr.decode().strip())

        rev = await asyncrunapp(
            "git",
            "rev-list",
            "--all",
            "--count",
            stdout=asyncPIPE,
            stderr=asyncPIPE,
        )
        stdout, stderr = await rev.communicate()
        revout = str(stdout.decode().strip()) + str(stderr.decode().strip())

        await event.edit(f"**Userbot:** `{verout}`\n" f"**Revision:** `{revout}`\n")
    else:
        await event.edit("**–ü–æ–∑–æ—Ä! –£ –≤–∞—Å –Ω–µ—Ç—É –≥–∏—Ç–∞!**")


@register(outgoing=True, pattern=r"^\.pip(?: |$)(.*)")
async def pipcheck(pip):
    """For .pip command, do a pip search."""
    if pip.text[0].isalpha() or pip.text[0] in ("/", "#", "@", "!"):
        return
    pipmodule = pip.pattern_match.group(1)
    if pipmodule:
        await pip.edit("**–ü–æ–∏—Å–∫...**")
        pipc = await asyncrunapp(
            "pip3",
            "search",
            pipmodule,
            stdout=asyncPIPE,
            stderr=asyncPIPE,
        )

        stdout, stderr = await pipc.communicate()
        pipout = str(stdout.decode().strip()) + str(stderr.decode().strip())

        if pipout:
            if len(pipout) > 4096:
                await pip.edit("**–í—ã–≤–æ–¥ –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º...**")
                with open("output.txt", "w+") as file:
                    file.write(pipout)
                await pip.client.send_file(
                    pip.chat_id,
                    "output.txt",
                    reply_to=pip.id,
                )
                remove("output.txt")
                return
            await pip.edit(
                "**–ó–∞–ø—Ä–æ—Å: **\n`"
                f"pip3 search {pipmodule}"
                "`\n**–†–µ–∑—É–ª—å—Ç–∞—Ç: **\n`"
                f"{pipout}"
                "`"
            )
        else:
            await pip.edit(
                "**–ó–∞–ø—Ä–æ—Å: **\n`"
                f"pip3 search {pipmodule}"
                "`\n**–†–µ–∑—É–ª—å—Ç–∞—Ç: **\n`No result returned/False`"
            )
    else:
        await pip.edit("**–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .help pip –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞.**")


@register(outgoing=True, pattern=r"^\.alive$")
async def amireallyalive(alive):
    """For .alive command, check if the bot is running."""
    await alive.edit(
        f"‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"‚î£‚Ä¢‚û≥‚û† KyaruBot is up!**\n\n"
        f"‚î£‚Ä¢‚û≥‚û† Telethon {version.__version__}\n"
        f"‚î£‚Ä¢‚û≥‚û† Python: {python_version()}\n"
        f"‚î£‚Ä¢‚û≥‚û† User: {DEFAULTUSER}"
        f"‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        " [üî•YOUTUBEüî•](https://youtube.com/c/Z3roHax) üîπ [üìúTELEGRAM LINKSüìú](https://t.me/yezerolinks)"
        " üî•DISCORDüî• üîπ üìúINSTAGRAMüìú"
        " [üî•REPOüî•](https://github.com/n3k0parad1se/Ky4ruBot)"
    )


@register(outgoing=True, pattern=r"^\.aliveu")
async def amireallyaliveuser(username):
    """For .aliveu command, change the username in the .alive command."""
    message = username.text
    if message != ".aliveu" and message[7:8] == " ":
        newuser = message[8:]
        global DEFAULTUSER
        DEFAULTUSER = newuser
    await username.edit(f"**–Æ–∑–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞** `{newuser}`**!**")


@register(outgoing=True, pattern=r"^\.resetalive$")
async def amireallyalivereset(ureset):
    """For .resetalive command, reset the username in the .alive command."""
    global DEFAULTUSER
    DEFAULTUSER = str(ALIVE_NAME) if ALIVE_NAME else uname().node
    await ureset.edit("**–Æ–∑–µ—Ä —Å–±—Ä–æ—à–µ–Ω!**")


CMD_HELP.update(
    {
        "sysd": ">`.sysd`" "\n–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–æ—Ñ–µ—Ç—á–∞.",
        "botver": ">`.botver`" "\n–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é —é–∑–µ—Ä–±–æ—Ç–∞.",
        "pip": ">`.pip <module(s)>`" "\n–î–µ–ª–∞–µ—Ç –ø–æ–∏—Å–∫ –º–æ–¥—É–ª–µ–π –ø–∏–ø–∞.",
        "alive": ">`.alive`"
        "\n–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞."
        "\n\n>`.aliveu <text>`"
        "\n–ú–µ–Ω—è–µ—Ç –∏–º—è —é–∑–µ—Ä–∞."
        "\n\n>`.resetalive`"
        "\n–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ —É–º–æ–ª—á–∞–Ω–∏–π.",
    }
)
